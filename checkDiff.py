import uproot
import pandas as pd
import glob
import numpy as np
import matplotlib.pyplot as plt
# file1 = uproot.open("/eos/cms/store/group/dpg_ecal/alca_ecalcalib/automation_repro/rereco202223_repro_v3/ecalelf/zskim/368764/ntuple_0.root")
# file2 = uproot.open("/eos/cms/store/group/dpg_ecal/alca_ecalcalib/ecalelf/ntuples/wangchu/2023IC/13.6TeV/133X_dataRun3_offline/EGamma1_Run2023C-EcalUncalZElectron-PromptReco-v4/jsonFilter/ntuple.root")

# tree1 = file1["selected"]
# tree2 = file2["selected"]
# selected_tree1 = tree1.arrays(["eventNumber", "invMass", "invMass_ECAL_ele"],library="pd")
# selected_tree2 = tree2.arrays(["eventNumber", "invMass", "invMass_ECAL_ele"],"(runNumber==368764) ",library="pd")
# selected_tree1=selected_tree1.sort_values(by='eventNumber', ascending=True)
# selected_tree2=selected_tree2.sort_values(by='eventNumber', ascending=True)
# print("df1",selected_tree1["invMass_ECAL_ele"].shape)
# print("df2",selected_tree2["invMass_ECAL_ele"].median())

# df = pd.merge(selected_tree1, selected_tree2, on='eventNumber',how='inner')
# df["diff"] =  df["invMass_ECAL_ele_x"]-df["invMass_ECAL_ele_y"]
# nonzero_df = df[(df['diff'] != 0) & (~df['diff'].isnull())]
# print(nonzero_df)
# print(df["invMass_ECAL_ele_x"].mean())
# print(df["invMass_ECAL_ele_y"].mean())

def getMedian(file):
    file1 = uproot.open(file)
    tree1 = file1["selected"]
    selected_tree1 = tree1.arrays(["runNumber","eventNumber", "invMass", "invMass_ECAL_ele","etaEle"],library="pd")
    # print("file:",file)
    # print(selected_tree1)
    selected_tree1 = selected_tree1[(abs(selected_tree1['etaEle[0]']) < 1.5) & (abs(selected_tree1['etaEle[1]']) < 1.5)]
    # print(selected_tree1["invMass_ECAL_ele"].median())
    grouped_df = selected_tree1.groupby('runNumber')['invMass_ECAL_ele'].median().values
    print("median:",grouped_df)
    grouped_df_mean = selected_tree1.groupby('runNumber')['invMass_ECAL_ele'].mean().values
    print("mean:",grouped_df_mean)
    # return selected_tree1["invMass_ECAL_ele"].median()
    return grouped_df,grouped_df_mean
    
# medians_ecalelf=[]
means_ecalelf=[]
medians_automation=[]
means_automation=[]
for file in glob.glob("/eos/cms/store/group/dpg_ecal/alca_ecalcalib/automation_repro/rereco202223_repro_v3/ecalelf/zskim/*/ntuple_0.root"):
    median,mean=getMedian(file)
    # print(median)
    medians_automation=np.concatenate((medians_automation, median))
    means_automation=np.concatenate((means_automation, mean))

# for file in glob.glob("/eos/cms/store/group/dpg_ecal/alca_ecalcalib/ecalelf/ntuples/wangchu/2023IC/13.6TeV/133X_dataRun3_offline/*/jsonFilter/ntuple.root"):
#     median=getMedian(file)
#     # print(median)
#     medians_ecalelf=np.concatenate((medians_ecalelf, median))
# print(medians_ecalelf)

# print(medians_automation)
# medians=[76.81902, 89.514565, 84.45922, 85.72505, 89.4939, 90.74817, 89.3848, 89.76666, 89.59126, 90.785965, 90.90567, 89.08882, 89.553604, 89.67761, 89.80984, 89.72564, 89.95546, 89.85524, 89.95143, 89.73346, 89.75507, 90.12465, 89.92331, 89.87999, 89.85538, 89.904495, 89.74261, 89.77979, 89.942116, 89.471756, 90.23188, 89.60629, 89.964165, 89.943245, 89.74187, 89.88844, 89.92151, 90.00364, 89.93365, 90.010574, 89.61809, 89.203316, 89.23468, 89.340454, 89.02018, 89.21396, 89.361984, 89.409836, 89.41871, 89.60569, 89.54221, 89.26262, 89.41032, 89.483185, 89.75235, 89.575424, 89.5115, 89.56029, 89.57119, 89.48939, 89.30151, 89.63809, 89.46958, 89.49408, 89.62738, 89.39615, 89.50909, 89.33916, 89.51458, 89.499596, 89.45413, 89.46761, 89.587105, 89.51243, 89.606766, 89.61189, 89.529755, 89.4389, 89.128845, 89.396904, 89.60714, 89.608955, 89.57851, 89.60915, 89.621574, 89.622444, 89.57779, 89.62889, 89.56148, 89.717606, 89.69902, 89.504875, 89.59496, 89.56086, 89.62903, 89.49028, 89.56233, 89.53764, 89.57358, 89.66979, 89.56108, 89.67438, 89.65014, 89.153885, 89.61015, 89.38282, 89.60388, 89.658295, 89.63574, 89.64794, 89.611084, 89.580215, 89.52765, 89.5189, 89.60646, 89.649315, 89.64578, 89.65806, 88.76683, 88.678375, 89.60263, 89.595345, 89.28224, 89.56882, 89.343376, 89.37593, 89.56563, 89.558014, 89.60398, 89.46988, 89.51206, 89.57849, 89.71132, 89.59945, 89.60497, 89.58417, 89.60619, 89.51574, 89.18512, 89.302666, 89.627075, 89.6216, 89.32314, 89.70113, 90.0951, 89.68397, 89.62339, 89.4369, 89.63843, 89.66922, 89.64954, 89.55698, 89.415306, 89.49771, 89.531624, 89.57508, 89.43158, 89.54445, 89.5824, 89.45983, 89.52015, 89.521194, 89.44447, 89.54211, 89.47649, 89.4974, 89.48143, 89.36728, 89.69024, 87.63005, 87.74693, 87.490486, 89.047104, 89.241745, 88.84349, 89.12822, 89.26955, 89.28082, 89.10321, 89.480896, 89.53189, 89.57244, 89.75447, 89.462265, 89.73175, 89.66508, 89.77212, 89.6784, 89.00769, 89.60829, 89.63782, 89.68388, 89.6868, 89.66972, 89.657036, 89.06604, 89.60663, 89.60523, 89.488686, 89.85908, 89.35565, 89.32923, 89.61332, 89.615875, 89.54831, 89.556335, 89.63349, 89.653366, 89.64357, 89.60674, 89.738235, 89.56655, 89.59106, 89.42648, 89.59771, 89.55076, 89.60861, 89.510895, 89.29152, 89.10414, 89.58879, 89.400406, 89.2113, 89.072395, 89.19638, 89.16927, 89.56313, 89.634544, 89.61549, 89.55602, 89.69654, 89.64806, 89.5278, 89.5793, 89.6994, 88.97128, 89.27508, 89.35101, 89.14763, 89.52832, 89.73237, 89.73143, 89.72364, 89.63066, 89.581955, 89.502914, 89.144066, 89.696396, 89.58726, 89.70656, 89.703606, 89.73273, 89.78682, 89.64602, 89.576996, 89.61568, 89.44802, 89.6552, 89.69437, 89.68436, 89.65552, 89.61691, 89.60049, 89.41721, 89.456856, 89.270996, 89.349304, 89.539734, 89.69634, 89.70697, 89.60982, 89.50475, 89.46562, 89.571335, 89.58248, 89.64407, 89.625946, 89.63785, 89.35354, 89.49807, 89.41806, 89.580536, 89.61245, 89.71202, 89.55817, 89.3929, 89.61709, 89.75805, 89.57109, 89.61614, 89.6126, 89.551605, 89.68133, 89.58599, 89.57127, 89.214806, 89.32912, 89.183655, 89.6343, 89.58911, 89.519485, 89.57828, 89.64868, 89.64129, 89.65387, 89.63173, 89.52812, 89.90296, 89.86903, 89.88945, 89.41336, 89.61346, 89.48221, 89.59158, 89.55882, 89.35657, 89.46015, 89.52275, 89.53382, 89.57613, 89.57773, 89.5377, 89.58365, 89.66136, 89.43141, 89.64322, 89.60782, 89.7099, 89.66678, 89.68614, 89.71421, 89.471565, 89.523544, 89.627075, 89.76836, 89.78093, 89.45323, 88.93497, 89.42132, 89.549, 89.70325, 89.82022, 89.7908, 89.64636, 89.69141, 89.47982, 89.83912, 89.780914, 89.6869, 89.837585, 89.76539, 89.81891, 90.06902, 89.92366, 89.67125, 89.780266, 89.83905, 89.64611, 88.90193, 89.44602, 89.176605, 89.64998, 89.45856, 89.50707, 89.405136, 89.669754, 89.594894, 89.561035, 89.62636, 89.692505, 89.5664, 89.73033, 89.19716, 89.65103, 89.61487, 89.70618, 89.65399, 89.74362, 89.738174, 89.78836, 89.827934, 89.83002, 89.823654, 89.743004, 89.841324, 89.78522, 89.706116, 89.5713, 89.88735, 89.8686, 89.9257, 89.43114, 89.55743, 89.556564, 89.62059, 89.65059, 89.66029, 89.51679, 89.7375, 89.688194, 89.65859, 89.63678, 89.67873, 89.79515, 89.707565, 89.551956, 89.60236, 89.73997, 89.63874, 89.746635, 89.75211, 89.72637, 89.6583, 89.74993, 89.80768, 89.63803, 89.613846, 89.61343, 89.74995, 89.69891, 89.353424, 89.73782, 89.748276, 89.596664, 89.67847, 89.67177, 89.5542, 89.50345, 89.664474, 89.78121, 89.60927, 89.557915, 89.73417, 89.83242, 89.73872, 89.7657, 89.57522, 89.52753, 89.625206, 89.60216, 89.54108, 89.534454, 89.63553, 89.77011, 89.70016, 89.48796, 89.77797, 89.83663, 89.731155, 89.967674, 89.918724, 89.964066, 89.98493, 89.96512, 89.86419, 89.349205, 89.47157, 89.395325, 89.284676, 89.427376, 89.40438, 89.26965, 89.203674, 89.6142, 89.61607, 89.633255, 89.65556, 89.560234, 89.54983, 89.66478, 89.562386, 89.66802, 89.84136, 89.86753, 89.75296, 89.74245, 89.720856, 89.71611, 89.6472, 89.774185, 89.71236, 89.67444, 89.73402, 89.66286, 89.66733, 89.6182, 89.75846, 89.74184, 90.1302, 89.671585, 89.605774, 89.67279, 89.32825, 89.72638, 89.534836, 89.77497, 89.73561, 89.790924, 89.86322, 89.659294, 89.69163, 89.86913, 89.770035, 89.712715, 88.53595, 89.15946, 89.01828, 89.29937, 89.425415, 89.546036, 89.44212, 89.51927, 89.577644, 89.69491, 89.7583, 89.786385, 89.69476, 89.83823, 89.7354, 89.73926, 89.38721, 89.68793, 89.5961, 89.83094, 89.666885, 89.732864, 89.67348, 89.739784, 89.76401, 89.705475, 89.15708, 89.42266, 89.74764, 89.66121, 89.55369, 89.42069, 89.658806, 89.2766, 89.15668, 89.48642, 89.69003, 89.74902, 89.8181, 89.84397, 89.8154, 89.71278, 89.247826]
# mean_value = np.mean(medians_ecalelf)
# print(mean_value)
plt.hist(means_automation,bins=40,range=(87, 91),alpha=0.5,label="means",color='skyblue')
plt.hist(medians_automation,bins=40,range=(87, 91),alpha=0.5,label="medians",color='r')
plt.savefig("test3.png")


